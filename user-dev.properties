spring.application.name=user

server.port=8098

spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.devtools.restart.enabled=true
spring.thymeleaf.cache=false

#????
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521/XE
spring.datasource.username=dowadream
spring.datasource.password=0000

##시간대 설정
spring.jpa.properties.hibernate.jdbc.time_zone=UTC
spring.jackson.time-zone=UTC

### lec04 :: Mybatis
#mybatis.type-aliases-package=com.boot.lec04.vo
# mybatis.mapper-locations=classpath:lec04_mappers/*.xml

### lec05 :: JPA
spring.jpa.database=oracle
spring.jpa.generate-ddl=false
spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.hibernate.ddl-auto=update

### CSS ?? ??
spring.mvc.static-path-pattern=/resources/**
spring.web.resources.static-locations=classpath:/static/css/,classpath:/static/js/,classpath:/static/images/

## lec08 :: sweager
springdoc.api-docs.enabled=true
springdoc.api-docs.path=/api-docs
springdoc.x.enabled=true
springdoc.swagger-ui.path=/swagger-ui.html

logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.security=DEBUG
# ??? ???

jwt.secretKey=64461f01e1af406da538b9c48d801ce59142452199ff112fb5404c8e7e98e3ff
jwt.access.expiration=3600000
jwt.access.header=Authorization

jwt.refresh.expiration=1209600000
jwt.refresh.header=Authorization-refresh








# oauth2 naver
# registration
spring.security.oauth2.client.registration.naver.client-name=naver
spring.security.oauth2.client.registration.naver.client-id=RfErDWRWF_oux6suecap
spring.security.oauth2.client.registration.naver.client-secret=FnZMHx9iss
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.redirect-uri=http://localhost:3000/login/oauth2/code/naver
spring.security.oauth2.client.registration.naver.scope= name, email,nickname,gender,age,profile_image,mobile

spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response


#provider

# oauth2 google
# registration

spring.security.oauth2.client.registration.google.client-id=986632294322-9hmsq2ocq54v9jeoe8g3ujp10c8au9jo.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:3000/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code


spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://www.googleapis.com/oauth2/v4/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v2/userinfo


#oauth2 kakao
# registration

spring.security.oauth2.client.registration.kakao.client-id=0f9dd5903eb146ccf1e0cef2e1656d78
spring.security.oauth2.client.registration.kakao.client-secret=fabMuM7jVG2sIk0TGaE6n4lha1y5yiwc
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,profile_image
spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost:3000/login/oauth2/code/kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.client-name=Kakao

spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

#provider


client.origins=http://localhost:3000,https://localhost:8098

spring.web.cors.allowed-origins=http://localhost:3000
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true

logging.level.org.springframework.security.oauth2=DEBUG

coolsms.api.key=NCSWJLTZELJGGXQD    // api key
coolsms.api.secret=2GES7TZKTEUYRAOPQYS0AJAZ7E1I49PM    // api secret
coolsms.fromnumber=01023276132


# Eureka 클라이언트 설정
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

# 클라이언트 애플리케이션의 IP 주소와 호스트 이름 설정
eureka.instance.ip-address=43.203.250.238
eureka.instance.prefer-ip-address=true

# Eureka 서버 URL
eureka.client.service-url.defaultZone=http://admin:1234@ec2-3-35-253-143.ap-northeast-2.compute.amazonaws.com:8761/eureka

# 헬스 체크 URL (클라이언트 애플리케이션의 헬스 체크 엔드포인트)
eureka.instance.health-check-url=http://43.203.250.238:8032/actuator/health

# 재시도 설정
eureka.client.retryable=false

# Actuator 헬스 체크 엔드포인트 활성화
management.endpoints.web.exposure.include=health


###cors setting
spring.cloud.gateway.globalcors.cors-configurations.[/*].allowedOrigins=http://ec2-3-35-253-143.ap-northeast-2.compute.amazonaws.com:8088,http://ec2-3-35-253-143.ap-northeast-2.compute.amazonaws.com:3000
spring.cloud.gateway.globalcors.cors-configurations.[/*].allowedMethods=GET,POST,PUT,DELETE
spring.cloud.gateway.globalcors.cors-configurations.[/*].allowedHeaders=*
spring.cloud.gateway.globalcors.cors-configurations.[/*].allowCredentials=true
